/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.7"
        
    }
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'com.google.protobuf'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.8
    implementation group: 'org.apache.tomcat', name: 'tomcat-servlet-api', version: '8.0.53'
    runtime 'io.grpc:grpc-okhttp:1.12.0'
    runtime 'io.grpc:grpc-protobuf-lite:1.12.0'
    runtime 'io.grpc:grpc-stub:1.12.0'
    
    runtime group: 'org.json', name: 'json', version: '20180813'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0'
        }
    }
    //这里配置生成目录，编译后会在build的目录下生成对应的java文件
    generateProtoTasks {
        all().each { task ->
        	task.builtins{
        		remove java
        	}
            task.plugins {
                grpc {
                	option 'lite'
                	outputSubDir = ''
                }
                javalite {
                	outputSubDir = ''
                }
            }
        }
    }
}

sourceSets {
	main {
		java {
		    srcDir 'build/generated/source/proto/main'
		}
	}
}
